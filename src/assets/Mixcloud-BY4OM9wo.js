import { g as _, r as f, u as m, p as g } from './index-CuqiLyNl.js'; function v (t, e) { for (let r = 0; r < e.length; r++) { const s = e[r]; if (typeof s !== 'string' && !Array.isArray(s)) { for (const o in s) if (o !== 'default' && !(o in t)) { const n = Object.getOwnPropertyDescriptor(s, o); n && Object.defineProperty(t, o, n.get ? n : { enumerable: !0, get: () => s[o] }) } } } return Object.freeze(Object.defineProperty(t, Symbol.toStringTag, { value: 'Module' })) } const P = Object.create; const i = Object.defineProperty; const O = Object.getOwnPropertyDescriptor; const b = Object.getOwnPropertyNames; const M = Object.getPrototypeOf; const w = Object.prototype.hasOwnProperty; const x = (t, e, r) => e in t ? i(t, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : t[e] = r; const j = (t, e) => { for (const r in e)i(t, r, { get: e[r], enumerable: !0 }) }; const c = (t, e, r, s) => { if (e && typeof e === 'object' || typeof e === 'function') for (const o of b(e))!w.call(t, o) && o !== r && i(t, o, { get: () => e[o], enumerable: !(s = O(e, o)) || s.enumerable }); return t }; const D = (t, e, r) => (r = t != null ? P(M(t)) : {}, c(!t || !t.__esModule ? i(r, 'default', { value: t, enumerable: !0 }) : r, t)); const S = t => c(i({}, '__esModule', { value: !0 }), t); const a = (t, e, r) => (x(t, typeof e !== 'symbol' ? e + '' : e, r), r); const d = {}; j(d, { default: () => l }); const h = S(d); const p = D(f); const u = m; const y = g; const E = 'https://widget.mixcloud.com/media/js/widgetApi.js'; const L = 'Mixcloud'; class l extends p.Component {constructor () { super(...arguments), a(this, 'callPlayer', u.callPlayer), a(this, 'duration', null), a(this, 'currentTime', null), a(this, 'secondsLoaded', null), a(this, 'mute', () => {}), a(this, 'unmute', () => {}), a(this, 'ref', e => { this.iframe = e }) }componentDidMount () { this.props.onMount && this.props.onMount(this) }load (e) { (0, u.getSDK)(E, L).then(r => { this.player = r.PlayerWidget(this.iframe), this.player.ready.then(() => { this.player.events.play.on(this.props.onPlay), this.player.events.pause.on(this.props.onPause), this.player.events.ended.on(this.props.onEnded), this.player.events.error.on(this.props.error), this.player.events.progress.on((s, o) => { this.currentTime = s, this.duration = o }), this.props.onReady() }) }, this.props.onError) }play () { this.callPlayer('play') }pause () { this.callPlayer('pause') }stop () {}seekTo (e, r = !0) { this.callPlayer('seek', e), r || this.pause() }setVolume (e) {}getDuration () { return this.duration }getCurrentTime () { return this.currentTime }getSecondsLoaded () { return null }render () { const { url: e, config: r } = this.props; const s = e.match(y.MATCH_URL_MIXCLOUD)[1]; const o = { width: '100%', height: '100%' }; const n = (0, u.queryString)({ ...r.options, feed: `/${s}/` }); return p.default.createElement('iframe', { key: s, ref: this.ref, style: o, src: `https://www.mixcloud.com/widget/iframe/?${n}`, frameBorder: '0', allow: 'autoplay' }) }}a(l, 'displayName', 'Mixcloud'); a(l, 'canPlay', y.canPlay.mixcloud); a(l, 'loopOnEnded', !0); const T = _(h); const N = v({ __proto__: null, default: T }, [h]); export { N as M }
